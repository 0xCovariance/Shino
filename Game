
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { GameSession } from "@/entities/GameSession";
import { Button } from "@/components/ui/button";
import { motion, AnimatePresence } from "framer-motion";
import { Trophy, Clock, User, RotateCcw } from "lucide-react";
import GameCard from "../components/game/GameCard";
import PlayerPanel from "../components/game/PlayerPanel";
import GameResults from "../components/game/GameResults";

// Theme data with word-picture pairs
const THEME_DATA = {
  colors: [
    { word: "Red", image: "🔴" }, { word: "Blue", image: "🔵" }, { word: "Green", image: "🟢" },
    { word: "Yellow", image: "🟡" }, { word: "Purple", image: "🟣" }, { word: "Orange", image: "🟠" },
    { word: "Pink", image: "🩷" }, { word: "Brown", image: "🤎" }, { word: "Black", image: "⚫" },
    { word: "White", image: "⚪" }, { word: "Gray", image: "🩶" }, { word: "Gold", image: "🟨" },
    { word: "Silver", image: "⚪" }, { word: "Turquoise", image: "🔷" }, { word: "Magenta", image: "🟪" }
  ],
  animals: [
    { word: "Dog", image: "🐕" }, { word: "Cat", image: "🐱" }, { word: "Lion", image: "🦁" },
    { word: "Elephant", image: "🐘" }, { word: "Tiger", image: "🐅" }, { word: "Bear", image: "🐻" },
    { word: "Monkey", image: "🐵" }, { word: "Rabbit", image: "🐰" }, { word: "Fox", image: "🦊" },
    { word: "Wolf", image: "🐺" }, { word: "Panda", image: "🐼" }, { word: "Koala", image: "🐨" },
    { word: "Penguin", image: "🐧" }, { word: "Owl", image: "🦉" }, { word: "Eagle", image: "🦅" }
  ],
  flags: [
    { word: "United States", image: "https://flagcdn.com/w160/us.svg" },
    { word: "United Kingdom", image: "https://flagcdn.com/w160/gb.svg" },
    { word: "France", image: "https://flagcdn.com/w160/fr.svg" },
    { word: "Germany", image: "https://flagcdn.com/w160/de.svg" },
    { word: "Japan", image: "https://flagcdn.com/w160/jp.svg" },
    { word: "China", image: "https://flagcdn.com/w160/cn.svg" },
    { word: "Canada", image: "https://flagcdn.com/w160/ca.svg" },
    { word: "Australia", image: "https://flagcdn.com/w160/au.svg" },
    { word: "Brazil", image: "https://flagcdn.com/w160/br.svg" },
    { word: "Italy", image: "https://flagcdn.com/w160/it.svg" },
    { word: "Spain", image: "https://flagcdn.com/w160/es.svg" },
    { word: "Russia", image: "https://flagcdn.com/w160/ru.svg" },
    { word: "India", image: "https://flagcdn.com/w160/in.svg" },
    { word: "Mexico", image: "https://flagcdn.com/w160/mx.svg" },
    { word: "South Korea", image: "https://flagcdn.com/w160/kr.svg" }
  ],
  food: [
    { word: "Apple", image: "🍎" }, { word: "Pizza", image: "🍕" }, { word: "Burger", image: "🍔" },
    { word: "Banana", image: "🍌" }, { word: "Cherry", image: "🍒" }, { word: "Grape", image: "🍇" },
    { word: "Strawberry", image: "🍓" }, { word: "Orange", image: "🍊" }, { word: "Peach", image: "🍑" },
    { word: "Bread", image: "🍞" }, { word: "Cheese", image: "🧀" }, { word: "Egg", image: "🥚" },
    { word: "Fish", image: "🐟" }, { word: "Chicken", image: "🍗" }, { word: "Cake", image: "🎂" }
  ],
  sport: [
    { word: "Football", image: "⚽" }, { word: "Basketball", image: "🏀" }, { word: "Tennis", image: "🎾" },
    { word: "Baseball", image: "⚾" }, { word: "Golf", image: "⛳" }, { word: "Swimming", image: "🏊" },
    { word: "Running", image: "🏃" }, { word: "Cycling", image: "🚴" }, { word: "Boxing", image: "🥊" },
    { word: "Soccer", image: "⚽" }, { word: "Hockey", image: "🏒" }, { word: "Volleyball", image: "🏐" },
    { word: "Badminton", image: "🏸" }, { word: "Skiing", image: "⛷️" }, { word: "Surfing", image: "🏄" }
  ],
  brands: [
    { word: "Apple", image: "https://logo.clearbit.com/apple.com" },
    { word: "Google", image: "https://logo.clearbit.com/google.com" },
    { word: "Microsoft", image: "https://logo.clearbit.com/microsoft.com" },
    { word: "Amazon", image: "https://logo.clearbit.com/amazon.com" },
    { word: "Netflix", image: "https://logo.clearbit.com/netflix.com" },
    { word: "Spotify", image: "https://logo.clearbit.com/spotify.com" },
    { word: "Tesla", image: "https://logo.clearbit.com/tesla.com" },
    { word: "Nike", image: "https://logo.clearbit.com/nike.com" },
    { word: "McDonald's", image: "https://logo.clearbit.com/mcdonalds.com" },
    { word: "Coca-Cola", image: "https://logo.clearbit.com/coca-cola.com" },
    { word: "Meta (Facebook)", image: "https://logo.clearbit.com/meta.com" },
    { word: "X (Twitter)", image: "https://logo.clearbit.com/x.com" },
    { word: "Instagram", image: "https://logo.clearbit.com/instagram.com" },
    { word: "YouTube", image: "https://logo.clearbit.com/youtube.com" },
    { word: "TikTok", image: "https://logo.clearbit.com/tiktok.com" }
  ]
};

const THEME_EMOJIS = {
  colors: "🎨",
  animals: "🐾",
  flags: "🏁",
  food: "🍕",
  sport: "⚽",
  brands: "🏢"
};

export default function Game() {
  const navigate = useNavigate();
  const [gameConfig, setGameConfig] = useState(null);
  const [cards, setCards] = useState([]);
  const [flippedCards, setFlippedCards] = useState([]);
  const [matchedPairs, setMatchedPairs] = useState([]);
  const [currentPlayer, setCurrentPlayer] = useState(0);
  const [players, setPlayers] = useState([]);
  const [gameStartTime, setGameStartTime] = useState(null);
  const [gameComplete, setGameComplete] = useState(false);
  const [showResults, setShowResults] = useState(false);

  // Initialize game from URL config
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const configParam = urlParams.get('config');
    
    if (configParam) {
      try {
        const config = JSON.parse(decodeURIComponent(configParam));
        setGameConfig(config);
        initializeGame(config);
      } catch (error) {
        console.error("Invalid game config");
        navigate(createPageUrl("Setup"));
      }
    } else {
      navigate(createPageUrl("Setup"));
    }
  }, []);

  const initializeGame = (config) => {
    const { difficulty, players, theme } = config;
    
    // Set up players with scores
    const initialPlayers = players.map(p => ({
      ...p,
      score: 0,
      matches: 0
    }));
    setPlayers(initialPlayers);
    
    // Get theme data and create cards
    const themeData = THEME_DATA[theme] || THEME_DATA.colors;
    const cardCount = difficulty === 'easy' ? 5 : difficulty === 'medium' ? 10 : 15;
    const selectedPairs = themeData.slice(0, cardCount);
    
    // Create card deck (word and picture for each pair)
    const gameCards = [];
    selectedPairs.forEach((pair, index) => {
      gameCards.push({
        id: `word-${index}`,
        type: 'word',
        content: pair.word,
        pairId: index,
        flipped: false,
        matched: false
      });
      gameCards.push({
        id: `image-${index}`,
        type: 'image', 
        content: pair.image,
        pairId: index,
        flipped: false,
        matched: false
      });
    });
    
    // Shuffle cards
    const shuffledCards = gameCards.sort(() => Math.random() - 0.5);
    setCards(shuffledCards);
    setGameStartTime(Date.now());
  };

  const handleCardClick = (cardId) => {
    if (flippedCards.length === 2) return;
    if (flippedCards.includes(cardId)) return;
    if (cards.find(c => c.id === cardId)?.matched) return;

    const newFlipped = [...flippedCards, cardId];
    setFlippedCards(newFlipped);

    // Flip the card
    setCards(prev => prev.map(card => 
      card.id === cardId ? { ...card, flipped: true } : card
    ));

    // Check for match when two cards are flipped
    if (newFlipped.length === 2) {
      const [firstId, secondId] = newFlipped;
      const firstCard = cards.find(c => c.id === firstId);
      const secondCard = cards.find(c => c.id === secondId);

      setTimeout(() => {
        if (firstCard.pairId === secondCard.pairId) {
          // Match found!
          setCards(prev => prev.map(card => 
            (card.id === firstId || card.id === secondId)
              ? { ...card, matched: true }
              : card
          ));
          
          setMatchedPairs(prev => [...prev, firstCard.pairId]);
          
          // Update current player score
          const basePoints = gameConfig.difficulty === 'easy' ? 10 : 
                           gameConfig.difficulty === 'medium' ? 15 : 20;
          
          setPlayers(prev => prev.map((player, index) => 
            index === currentPlayer 
              ? { 
                  ...player, 
                  score: player.score + basePoints,
                  matches: player.matches + 1
                }
              : player
          ));
          
          // Check if game is complete
          const totalPairs = gameConfig.difficulty === 'easy' ? 5 : 
                           gameConfig.difficulty === 'medium' ? 10 : 15;
          
          if (matchedPairs.length + 1 === totalPairs) {
            setGameComplete(true);
            setTimeout(() => setShowResults(true), 700);
          }
        } else {
          // No match - flip cards back and deduct points
          setCards(prev => prev.map(card => 
            (card.id === firstId || card.id === secondId)
              ? { ...card, flipped: false }
              : card
          ));
          
          // Deduct points for wrong guess
          setPlayers(prev => prev.map((player, index) => 
            index === currentPlayer 
              ? { ...player, score: Math.max(0, player.score - 2) }
              : player
          ));
          
          // Next player's turn
          setCurrentPlayer(prev => (prev + 1) % players.length);
        }
        
        setFlippedCards([]);
      }, 700);
    }
  };

  const saveGameResults = async () => {
    if (!gameComplete) return;
    
    const winner = players.reduce((prev, current) => 
      prev.score > current.score ? prev : current
    );
    
    const gameDuration = Math.floor((Date.now() - gameStartTime) / 1000);
    const totalPairs = gameConfig.difficulty === 'easy' ? 5 : 
                      gameConfig.difficulty === 'medium' ? 10 : 15;
    
    // Add winner bonus
    const finalPlayers = players.map(player => ({
      ...player,
      score: player.name === winner.name ? player.score + 50 : player.score
    }));
    
    await GameSession.create({
      difficulty: gameConfig.difficulty,
      theme: gameConfig.theme,
      players: finalPlayers,
      winner_name: winner.name,
      total_pairs: totalPairs,
      game_duration: gameDuration
    });
  };

  useEffect(() => {
    if (gameComplete) {
      saveGameResults();
    }
  }, [gameComplete]);

  const resetGame = () => {
    if (gameConfig) {
      initializeGame(gameConfig);
      setFlippedCards([]);
      setMatchedPairs([]);
      setCurrentPlayer(0);
      setGameComplete(false);
      setShowResults(false);
    }
  };

  if (!gameConfig) {
    return <div className="text-center p-8">Loading game...</div>;
  }

  if (showResults) {
    return <GameResults players={players} gameConfig={gameConfig} onPlayAgain={resetGame} />;
  }

  const gridCols = gameConfig.difficulty === 'easy' ? 'grid-cols-5' : 
                   gameConfig.difficulty === 'medium' ? 'grid-cols-5 md:grid-cols-10' : 
                   'grid-cols-6 md:grid-cols-10';

  return (
    <div className="max-w-7xl mx-auto px-6">
      {/* Game Header */}
      <div className="clay-card p-6 mb-8">
        <div className="flex flex-col md:flex-row justify-between items-center gap-4">
          <div className="flex items-center gap-4">
            <div className="text-2xl">{THEME_EMOJIS[gameConfig.theme] || "🎮"}</div>
            <div>
              <h1 className="text-2xl font-bold text-gray-800">
                {gameConfig.theme.charAt(0).toUpperCase() + gameConfig.theme.slice(1)} Memory
              </h1>
              <p className="text-gray-600">
                {gameConfig.difficulty.charAt(0).toUpperCase() + gameConfig.difficulty.slice(1)} • 
                {matchedPairs.length}/{gameConfig.difficulty === 'easy' ? 5 : gameConfig.difficulty === 'medium' ? 10 : 15} pairs found
              </p>
            </div>
          </div>
          
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-2 text-gray-600">
              <Clock className="w-4 h-4" />
              <span>{Math.floor((Date.now() - (gameStartTime || 0)) / 1000)}s</span>
            </div>
            <Button
              onClick={resetGame}
              className="clay-button bg-gradient-to-r from-gray-300 to-gray-400 hover:from-gray-400 hover:to-gray-500 text-gray-700 px-4 py-2 flex items-center gap-2"
            >
              <RotateCcw className="w-4 h-4" />
              Reset
            </Button>
          </div>
        </div>
      </div>

      {/* Player Panels */}
      <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
        {players.map((player, index) => (
          <PlayerPanel
            key={index}
            player={player}
            isActive={index === currentPlayer}
            isWinner={gameComplete && player.score === Math.max(...players.map(p => p.score))}
          />
        ))}
      </div>

      {/* Game Board */}
      <div className="clay-card p-8">
        <div className={`grid ${gridCols} gap-4 md:gap-5`}>
          {cards.map((card) => (
            <GameCard
              key={card.id}
              card={card}
              onClick={() => handleCardClick(card.id)}
              disabled={flippedCards.length === 2 || gameComplete}
            />
          ))}
        </div>
      </div>

      {/* Game Complete Animation */}
      <AnimatePresence>
        {gameComplete && !showResults && (
          <motion.div
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
          >
            <motion.div
              initial={{ y: 50 }}
              animate={{ y: 0 }}
              className="clay-card p-8 text-center max-w-md mx-4"
            >
              <div className="text-6xl mb-4">🎉</div>
              <h2 className="text-2xl font-bold text-gray-800 mb-2">Game Complete!</h2>
              <p className="text-gray-600">Calculating final scores...</p>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}
