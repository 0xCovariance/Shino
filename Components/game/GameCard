import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';

export default function GameCard({ card, onClick, disabled }) {
  const isFlipped = card.flipped || card.matched;
  const isUrl = (str) => typeof str === 'string' && str.startsWith('http');
  const [imageError, setImageError] = useState(false);

  useEffect(() => {
    // Reset image error state if the card content changes (e.g., on game reset)
    setImageError(false);
  }, [card.content]);

  const handleImageError = () => {
    setImageError(true);
  };
  
  return (
    <motion.div
      className={`aspect-square clay-element cursor-pointer flex items-center justify-center transition-all duration-300 ${
        card.matched 
          ? 'bg-gradient-to-br from-green-200 to-green-300 cursor-default' 
          : isFlipped 
            ? 'bg-gradient-to-br from-blue-200 to-purple-200' 
            : disabled
              ? 'bg-gradient-to-br from-gray-100 to-gray-200 cursor-not-allowed opacity-75'
              : 'bg-gradient-to-br from-white to-gray-50 hover:from-gray-50 hover:to-gray-100'
      }`}
      onClick={() => !disabled && onClick()}
      whileHover={disabled ? {} : { scale: 1.05 }}
      whileTap={disabled ? {} : { scale: 0.95 }}
      initial={{ rotateY: 0 }}
      animate={{ rotateY: isFlipped ? 180 : 0 }}
      transition={{ duration: 0.3 }}
    >
      <div 
        className={`text-center transition-opacity duration-150 w-full h-full flex items-center justify-center ${
          isFlipped ? 'opacity-100' : 'opacity-0'
        }`}
        style={{ transform: 'rotateY(180deg)' }}
      >
        {isFlipped ? (
          card.type === 'word' ? (
            <span className="text-sm md:text-base lg:text-xl p-1 font-bold text-gray-800 leading-tight">
              {card.content}
            </span>
          ) : isUrl(card.content) ? (
            imageError ? (
              <span className="text-2xl md:text-3xl lg:text-4xl">üñºÔ∏è</span>
            ) : (
              <img 
                src={card.content} 
                alt="Card content" 
                className="w-full h-full object-contain p-2 md:p-3" 
                onError={handleImageError}
              />
            )
          ) : (
            <span className="text-2xl md:text-3xl lg:text-4xl">
              {card.content}
            </span>
          )
        ) : null}
      </div>
      
      <div 
        className={`absolute inset-0 flex items-center justify-center transition-opacity duration-150 ${
          isFlipped ? 'opacity-0' : 'opacity-100'
        }`}
      >
        {/* Back of the card is now blank */}
      </div>
    </motion.div>
  );
}
